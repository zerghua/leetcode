web browser <--> HTTP  <-- port 80 --> TCP
UDP header(source port 2 bytes, target port 2 bytes, length 2 bytes, checksum 2 bytes) 8 bytes.
TCP header(source/target port, sequence number, Acknowledgment number, checksum etc...)20-24 bytes
IP header(source/target IP address...) IP size = 2^16 + header() ~= 65536 + 20 bytes
Ethernet protocol header(source/target MAC address) ARP to map between IP and MAC address.
MTU(Maximum Transfer Unit) in Ethernet networks(network/physical layer) is of 1,500 bytes
if target is not in the same network, use gateway's MAC address.

DNS(on UDP, port 53.)
HTTP based on TCP(not UDP)
Ethernet network(broadcasting target MAC in its network, each host accept or discard)

IP address to help to identify sub-network, so it can be broadcast in Ethernet network.

subnet mask will help to tell if two IP are in the same sub-network

Purpose of IP:
1. assign IP address to each host
2. identify which IPs are in the same network.


The PC finds that the destination IP address does not belong to his own IP address range
and it has to forward the request to the Gateway. The Gateway in this scenario can be a router
or a Proxy Server. Though the Gateway’s IP address is known to the client machine but computers
do not exchange data on IP addresses, rather they need the machine’s hardware address which is
Layer-2 factory coded MAC address.

To obtain the MAC address of the Gateway, the client PC broadcasts an ARP request
saying "Who owns this IP address?" The Gateway in response to the ARP query
sends its MAC address. Upon receiving the MAC address, the PC sends the packets to the Gateway.

It is important that source and destination MAC addresses change as they travel across
the Internet (segment by segment) but source and destination IP addresses never change.

gateway will provide the MAC address of IP.

<Ethernet header>--<IP header>--<TCP header>--<HTTP data>





what-happens-when-you-type-in-a-url-in-browser
http://stackoverflow.com/questions/2092527/what-happens-when-you-type-in-a-url-in-browser

In an extremely rough and simplified sketch, assuming the simplest possible HTTP request,
no proxies, IPv4 and no problems in any step:

1. browser checks cache; if requested object is in cache and is fresh, skip to #9

2. browser asks OS for server's IP address

3. OS makes a DNS lookup and replies the IP address to the browser

4. browser opens a TCP connection to server (this step is much more complex with HTTPS)

5. browser sends the HTTP request through TCP connection

6. browser receives HTTP response and may close the TCP connection, or reuse it for another request

7. browser checks if the response is a redirect or a conditional response (3xx result status codes),
authorization request (401), error (4xx and 5xx), etc.; these are handled differently
from normal responses (2xx)

8. if cacheable, response is stored in cache

9. browser decodes response (e.g. if it's gzipped)

10. browser determines what to do with response (e.g. is it a HTML page, is it an image,
is it a sound clip?)

11. browser renders response, or offers a download dialog for unrecognized types

Again, discussion of each of these points have filled countless pages;
take this only as a short summary. Also, there are many other things happening in parallel
to this (processing typed-in address, speculative prefetching, adding page to browser history,
displaying progress to user, notifying plugins and extensions, rendering the page
while it's downloading, pipelining, connection tracking for keep-alive,
checking for malicious content etc.) - and the whole operation gets
an order of magnitude more complex with HTTPS (certificates and ciphers and pinning, oh my!).





Network Interface Layer
http://www.hardwaresecrets.com/how-tcp-ip-protocol-works-part-1/6/

Datagrams generated on the Internet layer will be sent down to the Network Interface layer,
if we are sending data, or the Network Interface layer will get data from the network and
send it to the Internet layer, if we are receiving data.

This layer is defined by what type of physical network your computer is connected to.
Almost always your computer will be connected to an Ethernet network (wireless networks
are also Ethernet networks like we will explain).

Like we said in the previous page, TCP/IP is a set of protocols that deals with layers 3 to 7
from the OSI reference model, while Ethernet is a set of protocols that deals with layers 1 and 2
from the OSI reference model – meaning Ethernet deals with the physical aspect of the data transmission.
 So they complement each other, as we need the full seven layers (or their equivalents) to
 establish a network connection.

Ethernet has three layers: Logic Link Control (LLC), Media Access Control (MAC) and Physical.
LLC and MAC layers correspond, together, to the second layer from the OSI reference model.
You can see Ethernet architecture in Figure 6.


The Logic Link Control layer (LLC) is in charge of adding information of which protocol on the
Internet layer delivered data to be transmitted, so when receiving a frame from the network this
layer on the receiving computer has to know to which protocol from the Internet layer it should
deliver data. This layer is defined by IEEE 802.2 protocol.

The Media Access Control layer (MAC) is in charge of assembling the frame that will be sent over
the network. This layer is in charge of adding the source MAC address and the target MAC address – as
we explained before, MAC address is the physical address of a network card. Frames that are targeted
to another network will use the router MAC address as the target address. This layer is defined
by IEEE 802.3 protocol, if a cabled network is being used, or by IEEE 802.11 protocol, if a wireless
network is being used.

The Physical layer is in charge of converting the frame generated by the MAC layer into electricity
(if a cabled network is being used) or into electromagnetic waves (if a wireless network is being used).
 This layer is also defined by IEEE 802.3 protocol, if a cabled network is being used, or by IEEE 802.11
  protocol, if a wireless network is being used.

The LLC and MAC layers add their own headers to the datagram they receive from the Internet layer.
So a complete structure of the frames generated by these two layers can be seen in Figure 7.
Notice that the headers added by the upper layers are seen as “data” by the LLC layer.
The same thing happens with the header inserted by the LLC layer, which will be seen as data by
the MAC layer.

The LLC layer adds a 3-byte or 5-byte header and its datagram has a maximum total size of 1,500 bytes,
leaving a maximum of 1,497 or 1,492 bytes for data. The MAC layer adds a 22-byte header and a 4-byte CRC
 (data correction) data at the end of the datagram received from the LLC layer, forming the Ethernet
 frame. Thus the maximum size of an Ethernet frame is of 1,526 bytes.





HTTP, DNS, caching, TCP/IP.

DNS Name Server Load Balancing(Domain Name System)
load balancing: to spread requests across multiple hardware servers
DNS supports this by providing a simple way to implement load balancing. Instead of specifying a single Address resource record for a name, we can create several such records, thereby associating more than one IP address with a particular DNS name.


TCP/IP is an abbreviation for Transmission Control Protocol / Internet Protocol
It is a set of protocols that define how two or more computers can communicate with each other and transmit data.

Another related protocol is UDP (User Datagram Protocol) which also runs on top of the IP (Internet Protocol)

The difference between TCP and UDP is that TCP is connection based protocol whereas UDP is connectionless. In other words when TCP is being used there is a session setup between the hosts and the transfer is guaranteed. For UDP each data packet is sent but there is no checking that it has been received, or anyway of resending within the network layers.


A common way of comparing these is to liken TCP to the telephone system and UDP to the postal service

At first it may sound that there is no reason to choose UDP over TCP after all if you can have the extra reassurance then why would you care about UDP. The reason for this is that there is a lot of overhead involved in TCP. For each data packet being sent a confirmation has to be generated and even if there is no data being sent there will often be some kind of keep alive signal. Whereas for some less important data you may just want to send and forget it with the hope it will reach the other end. It's also possible for the sesssion to be handled higher up the networking stack (but I'm getting ahead of myself here).

 	OSI model	 TCP/IP stack
7	Application	 Application
6	Presentation
5	Session	     TCP or UDP(how to deliver data, connection or connectionless)
4	Transport
3	Network	     IP(address of source and destination)
2	Data link	 Network interface
1	Physical	 Physical


IP Addressing Scheme

IP Address class ranges(n is network, h is host)
Class A	0.hhh.hhh.hhh	to	127.hhh.hhh.hhh  (network is 8 bits)
Class B	128.nnn.hhh.hhh	to	191.nnn.hhh.hhh  (network is 16 bits)
Class C	192.nnn.nnn.hhh	to	223.nnn.nnn.hhh  (network is 24 bits, 200 thousand possible networks each with up to 254 hosts)
Class D	224.xxx.xxx.xxx	to	239.xxx.xxx.xxx
Class E	240.xxx.xxx.xxx	to	255.xxx.xxx.xxx

Reserved Addresses
127.0.0.1	Refers to localhost
All host bits binary 0s	Refer to the network
All host bits binary 1s	Broadcast address - send to all addresses

Private Address Ranges (defined in RFC 1918)
Class A	10.0.0.0	to	10.255.255.255
Class B	172.16.0.0	to	172.31.255.255
Class C	192.168.0.0	to	192.168.255.255



To provide Internet access for a host with a private address range the communications have to go through a NAT (Network Address Translation). This is one way that the number of available IP addresses can be preserved.


Subnet Masks? come back




Sockets and Port Numbers(IP is address of machine, port is which application on this machine, IP + Port == Socket, port can be used for both TCP and UDP)
Whilst the IP address provides the connection to the correct machine, it cannot distinguish the different service that is required. The port is used to distinguish the application. It is a value from 0 to 65535. The combination of IP address, port and protocol is called a socket, and has to be unique for every service. The port numbers area available for both TCP and UDP, and when referred to in conjunction with the IP address it specifies the "socket".

cat /etc/services



The MAC address is usually hard coded into the ethernet card and are unique across every device made. This is achieved by allocating a block of addresses to each manufacturer of ethernet devices.

To translate between IP addresses and MAC addresses on the local ethernet the Address Resolution Protocol (ARP) is used.



Domain Name System (DNS)
Hostnames have an hierarchical structure. The names read from right to left as though moving down a tree.

If a computer wants to communicate with www.penguintutor.com then it will first contact its local DNS server with an nslookup for that specific site. This will normally be a DNS server provided by their own company or their ISP(for home user).

To speed up the DNS process many DNS machines provide a caching feature where they can store the result of some of the lookups they perform. The names cached can either be for specific hosts (although except for popular sites they will be less likely to have a hit on the cache). Alternatively the DNS will cache the address of another DNS server allowing it to bypass some of the process (for example caching the com DNS would allow the DNS to skip the root query for subsequent .com queries).

The use of a DNS cache is so significant that there are even caching-only DNS servers that do not act as a zone of authority for any domain.

cat /etc/resolv.conf



Handling hosts without a DNS server
This can be implemented by adding entries to the /etc/hosts file



Routing
The devices that handle the directing of traffic are known as routers.
These routers take an incoming packet and based upon the destination address send them through a different interface to either another router or to the end destination.



IPV4 32 bit,  IPV6 128 bit.



The Hypertext Transfer Protocol (HTTP) is an application-level protocol for distributed, collaborative, hypermedia information systems.

Basically, HTTP is an TCP/IP based communication protocol, which is used to deliver data (HTML files, image files, query results etc) on the World Wide Web.

The default port is TCP 80, but other ports can be used. It provides a standardized way for computers to communicate with each other. HTTP specification specifies how clients request data will be constructed and sent to the server, and how servers respond to these requests.



HTTP is connectionless: The HTTP client ie. browser initiates an HTTP request and after a request is made, the client disconnects from the server and waits for a response. The server process the request and re-establish the connection with the client to send response back.

HTTP is media independent: This means, any type of data can be sent by HTTP as long as both the client and server know how to handle the data content. This is required for client as well as server to specify the content type using appropriate MIME-type.

HTTP is stateless: As mentioned above, HTTP is a connectionless and this is a direct result that HTTP is a stateless protocol. The server and client are aware of each other only during a current request. Afterwards, both of them forget about each other. Due to this nature of the protocol, neither the client nor the browser can retain information between different request across the web pages.
















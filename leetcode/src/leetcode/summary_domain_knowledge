web browser <--> HTTP  <-- port 80 --> TCP
UDP header(source port 2 bytes, target port 2 bytes, length 2 bytes, checksum 2 bytes) 8 bytes.
TCP header(source/target port, sequence number, Acknowledgment number, checksum etc...)20-24 bytes
IP header(source/target IP address...) IP size = 2^16 + header() ~= 65536 + 20 bytes
Ethernet protocol header(source/target MAC address) ARP to map between IP and MAC address.
MTU(Maximum Transfer Unit) in Ethernet networks(network/physical layer) is of 1,500 bytes
if target is not in the same network, use gateway's MAC address.

DNS(on UDP, port 53.)
HTTP based on TCP(not UDP)
Ethernet network(broadcasting target MAC in its network, each host accept or discard)

IP address to help to identify sub-network, so it can be broadcast in Ethernet network.

subnet mask will help to tell if two IP are in the same sub-network

Purpose of IP:
1. assign IP address to each host
2. identify which IPs are in the same network.


The PC finds that the destination IP address does not belong to his own IP address range
and it has to forward the request to the Gateway. The Gateway in this scenario can be a router
or a Proxy Server. Though the Gateway’s IP address is known to the client machine but computers
do not exchange data on IP addresses, rather they need the machine’s hardware address which is
Layer-2 factory coded MAC address.

To obtain the MAC address of the Gateway, the client PC broadcasts an ARP request
saying "Who owns this IP address?" The Gateway in response to the ARP query
sends its MAC address. Upon receiving the MAC address, the PC sends the packets to the Gateway.

It is important that source and destination MAC addresses change as they travel across
the Internet (segment by segment) but source and destination IP addresses never change.

gateway will provide the MAC address of IP.

<Ethernet header>--<IP header>--<TCP header>--<HTTP data>





what-happens-when-you-type-in-a-url-in-browser
http://stackoverflow.com/questions/2092527/what-happens-when-you-type-in-a-url-in-browser

In an extremely rough and simplified sketch, assuming the simplest possible HTTP request,
no proxies, IPv4 and no problems in any step:

1. browser checks cache; if requested object is in cache and is fresh, skip to #9

2. browser asks OS for server's IP address

3. OS makes a DNS lookup and replies the IP address to the browser

4. browser opens a TCP connection to server (this step is much more complex with HTTPS)

5. browser sends the HTTP request through TCP connection

6. browser receives HTTP response and may close the TCP connection, or reuse it for another request

7. browser checks if the response is a redirect or a conditional response (3xx result status codes),
authorization request (401), error (4xx and 5xx), etc.; these are handled differently
from normal responses (2xx)

8. if cacheable, response is stored in cache

9. browser decodes response (e.g. if it's gzipped)

10. browser determines what to do with response (e.g. is it a HTML page, is it an image,
is it a sound clip?)

11. browser renders response, or offers a download dialog for unrecognized types

Again, discussion of each of these points have filled countless pages;
take this only as a short summary. Also, there are many other things happening in parallel
to this (processing typed-in address, speculative prefetching, adding page to browser history,
displaying progress to user, notifying plugins and extensions, rendering the page
while it's downloading, pipelining, connection tracking for keep-alive,
checking for malicious content etc.) - and the whole operation gets
an order of magnitude more complex with HTTPS (certificates and ciphers and pinning, oh my!).





Network Interface Layer
http://www.hardwaresecrets.com/how-tcp-ip-protocol-works-part-1/6/

Datagrams generated on the Internet layer will be sent down to the Network Interface layer,
if we are sending data, or the Network Interface layer will get data from the network and
send it to the Internet layer, if we are receiving data.

This layer is defined by what type of physical network your computer is connected to.
Almost always your computer will be connected to an Ethernet network (wireless networks
are also Ethernet networks like we will explain).

Like we said in the previous page, TCP/IP is a set of protocols that deals with layers 3 to 7
from the OSI reference model, while Ethernet is a set of protocols that deals with layers 1 and 2
from the OSI reference model – meaning Ethernet deals with the physical aspect of the data transmission.
 So they complement each other, as we need the full seven layers (or their equivalents) to
 establish a network connection.

Ethernet has three layers: Logic Link Control (LLC), Media Access Control (MAC) and Physical.
LLC and MAC layers correspond, together, to the second layer from the OSI reference model.
You can see Ethernet architecture in Figure 6.


The Logic Link Control layer (LLC) is in charge of adding information of which protocol on the
Internet layer delivered data to be transmitted, so when receiving a frame from the network this
layer on the receiving computer has to know to which protocol from the Internet layer it should
deliver data. This layer is defined by IEEE 802.2 protocol.

The Media Access Control layer (MAC) is in charge of assembling the frame that will be sent over
the network. This layer is in charge of adding the source MAC address and the target MAC address – as
we explained before, MAC address is the physical address of a network card. Frames that are targeted
to another network will use the router MAC address as the target address. This layer is defined
by IEEE 802.3 protocol, if a cabled network is being used, or by IEEE 802.11 protocol, if a wireless
network is being used.

The Physical layer is in charge of converting the frame generated by the MAC layer into electricity
(if a cabled network is being used) or into electromagnetic waves (if a wireless network is being used).
 This layer is also defined by IEEE 802.3 protocol, if a cabled network is being used, or by IEEE 802.11
  protocol, if a wireless network is being used.

The LLC and MAC layers add their own headers to the datagram they receive from the Internet layer.
So a complete structure of the frames generated by these two layers can be seen in Figure 7.
Notice that the headers added by the upper layers are seen as “data” by the LLC layer.
The same thing happens with the header inserted by the LLC layer, which will be seen as data by
the MAC layer.

The LLC layer adds a 3-byte or 5-byte header and its datagram has a maximum total size of 1,500 bytes,
leaving a maximum of 1,497 or 1,492 bytes for data. The MAC layer adds a 22-byte header and a 4-byte CRC
 (data correction) data at the end of the datagram received from the LLC layer, forming the Ethernet
 frame. Thus the maximum size of an Ethernet frame is of 1,526 bytes.


Given a text file file.txt that contains list of phone numbers (one per line),
write a one liner bash script to print all valid phone numbers.

You may assume that a valid phone number must appear in one of the following
two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)

You may also assume each line in the text file must not contain leading or trailing white spaces.

For example, assume that file.txt has the following content:

987-123-4567
123 456 7890
(123) 456-7890

Your script should output the following valid phone numbers:

987-123-4567
(123) 456-7890




-- 8/10/2017
-- 26 / 26 test cases passed.
-- 18 ms
grep -e '\(^[0-9]\{3\}-[0-9]\{3\}-[0-9]\{4\}$\)' -e '\(^([0-9]\{3\})[ ]\{1\}[0-9]\{3\}-\([0-9]\{4\}\)$\)'  file.txt

    In Bash, we use \ to escape next one trailing character;
    ^ is used to denote the beginning of a line
    $ is used to denote the end of a line
    {M} is used to denote to match exactly M times of the previous occurence/regex
    (...) is used to group pattern/regex together

Back to this problem: it requires us to match two patterns, for better readability,
I used -e and separate the two patterns into two regexes,
the first one matches this case: xxx-xxx-xxxx and the second one matches this case: (xxx) xxx-xxxx
